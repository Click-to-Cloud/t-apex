var pageComponent =
webpackJsonppageComponent([10],{

/***/ 280:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _metalComponent = __webpack_require__(1);

var _metalComponent2 = _interopRequireDefault(_metalComponent);

var _metalSoy = __webpack_require__(2);

var _metalSoy2 = _interopRequireDefault(_metalSoy);

__webpack_require__(5);

__webpack_require__(6);

__webpack_require__(7);

__webpack_require__(8);

__webpack_require__(9);

__webpack_require__(10);

__webpack_require__(11);

__webpack_require__(12);

__webpack_require__(13);

__webpack_require__(14);

__webpack_require__(15);

__webpack_require__(16);

var _indexSoy = __webpack_require__(281);

var _indexSoy2 = _interopRequireDefault(_indexSoy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var dqcJD = function (_Component) {
  _inherits(dqcJD, _Component);

  function dqcJD() {
    _classCallCheck(this, dqcJD);

    return _possibleConstructorReturn(this, (dqcJD.__proto__ || Object.getPrototypeOf(dqcJD)).apply(this, arguments));
  }

  return dqcJD;
}(_metalComponent2.default);

;

_metalSoy2.default.register(dqcJD, _indexSoy2.default);

exports.default = dqcJD;

/***/ }),

/***/ 281:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.templates = exports.dqcJD = undefined;

var _metalComponent = __webpack_require__(1);

var _metalComponent2 = _interopRequireDefault(_metalComponent);

var _metalSoy = __webpack_require__(2);

var _metalSoy2 = _interopRequireDefault(_metalSoy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* jshint ignore:start */


var templates;
goog.loadModule(function (exports) {

  // This file was automatically generated from index.soy.
  // Please don't edit this file by hand.

  /**
   * @fileoverview Templates in namespace dqcJD.
   * @public
   */

  goog.module('dqcJD.incrementaldom');

  /** @suppress {extraRequire} */
  var soy = goog.require('soy');
  /** @suppress {extraRequire} */
  var soydata = goog.require('soydata');
  /** @suppress {extraRequire} */
  goog.require('goog.asserts');
  /** @suppress {extraRequire} */
  goog.require('soy.asserts');
  /** @suppress {extraRequire} */
  goog.require('goog.i18n.bidi');
  /** @suppress {extraRequire} */
  goog.require('goog.string');
  var IncrementalDom = goog.require('incrementaldom');
  var ie_open = IncrementalDom.elementOpen;
  var ie_close = IncrementalDom.elementClose;
  var ie_void = IncrementalDom.elementVoid;
  var ie_open_start = IncrementalDom.elementOpenStart;
  var ie_open_end = IncrementalDom.elementOpenEnd;
  var itext = IncrementalDom.text;
  var iattr = IncrementalDom.attr;

  var $templateAlias2 = _metalSoy2.default.getTemplate('ElectricCode.incrementaldom', 'render');

  var $templateAlias1 = _metalSoy2.default.getTemplate('guide.incrementaldom', 'render');

  /**
   * @param {{
   *    page: (?),
   *    site: (?)
   * }} opt_data
   * @param {(null|undefined)=} opt_ignored
   * @param {Object<string, *>=} opt_ijData
   * @return {void}
   * @suppress {checkTypes}
   */
  function $render(opt_data, opt_ignored, opt_ijData) {
    var param471 = function param471() {
      ie_open('h6');
      var dyn33 = opt_data.page.description;
      if (typeof dyn33 == 'function') dyn33();else if (dyn33 != null) itext(dyn33);
      ie_close('h6');
      ie_open('article', null, null, 'id', '1');
      ie_open('h2');
      itext('Random Data Generator');
      ie_close('h2');
      ie_open('p');
      itext('A full-featured random data generator is shipped with T.apex. We can use this random data generator to generate test data.');
      ie_close('p');
      ie_open('p');
      itext('In test code, we can do this:');
      ie_close('p');
      $templateAlias2({ code: 'String s = (String)T.create(\'String\');', mode: 'javascript' }, null, opt_ijData);
      ie_open('p');
      itext('And this will generate a random string for us.');
      ie_close('p');
      ie_open('p');
      itext('Also we can use below, which is equivalent to the above.');
      ie_close('p');
      $templateAlias2({ code: 'String s = (String)Random.anyString.run();', mode: 'javascript' }, null, opt_ijData);
      ie_open('p');
      ie_open('code');
      itext('Random');
      ie_close('code');
      itext(' is just the random data generator in T.apex. ');
      ie_open('strong');
      itext('Note');
      ie_close('strong');
      itext(' that ');
      ie_open('code');
      itext('T');
      ie_close('code');
      itext(' can only be used in test codes, while ');
      ie_open('code');
      itext('Random');
      ie_close('code');
      itext('is just a utility class and can be used anywhere outside test codes.');
      ie_close('p');
      ie_open('p');
      itext('Therefore, if we want to generate random data outside test codes, please use the latter form.');
      ie_close('p');
      ie_close('article');
      ie_open('article', null, null, 'id', '2');
      ie_open('h2');
      itext('Generator Options');
      ie_close('h2');
      ie_open('p');
      itext('We can actually pass in options to fine tune how we would like the random data to be generated.');
      ie_close('p');
      $templateAlias2({ code: 'String s = (String)T.create(\'String\', new Map<String, Object>{ ... });', mode: 'javascript' }, null, opt_ijData);
      ie_open('p');
      itext('Or');
      ie_close('p');
      $templateAlias2({ code: 'String s = (String)Random.anyString.run(new Map<String, Object>{ ... });', mode: 'javascript' }, null, opt_ijData);
      ie_open('p');
      itext('are the equivalent. The details of the options rely on the random data we want to generate.');
      ie_close('p');
      ie_close('article');
      ie_open('article', null, null, 'id', '3');
      ie_open('h2');
      itext('Random Object');
      ie_close('h2');
      ie_open('p');
      itext('We can create a random Object like this:');
      ie_close('p');
      $templateAlias2({ code: 'Random.anyObject.run(new Map<String, Object>{\n    \'type\' => \'String\',\n    \'config\' => new Map<String, Object>{ \'min\' => 5 }\n})', mode: 'javascript' }, null, opt_ijData);
      ie_open('p');
      itext('Here are the options:');
      ie_close('p');
      ie_open('table');
      ie_open('thead');
      ie_open('tr');
      ie_open('th');
      itext('Key');
      ie_close('th');
      ie_open('th');
      itext('Value Type');
      ie_close('th');
      ie_open('th');
      itext('Description');
      ie_close('th');
      ie_close('tr');
      ie_close('thead');
      ie_open('tbody');
      ie_open('tr');
      ie_open('td');
      itext('type');
      ie_close('td');
      ie_open('td');
      itext('String');
      ie_close('td');
      ie_open('td');
      itext('The type of data to create');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('config');
      ie_close('td');
      ie_open('td');
      itext('Map<String, Object>');
      ie_close('td');
      ie_open('td');
      itext('The options to create this type of data');
      ie_close('td');
      ie_close('tr');
      ie_close('tbody');
      ie_close('table');
      ie_open('p');
      itext('Available types are:');
      ie_close('p');
      ie_open('table');
      ie_open('thead');
      ie_open('tr');
      ie_open('th');
      itext('Name');
      ie_close('th');
      ie_open('th');
      itext('Description');
      ie_close('th');
      ie_close('tr');
      ie_close('thead');
      ie_open('tbody');
      ie_open('tr');
      ie_open('td');
      itext('Boolean');
      ie_close('td');
      ie_open('td');
      itext('Boolean');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('Integer');
      ie_close('td');
      ie_open('td');
      itext('Integer');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('Long');
      ie_close('td');
      ie_open('td');
      itext('Long');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('Double');
      ie_close('td');
      ie_open('td');
      itext('Double');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('Decimal');
      ie_close('td');
      ie_open('td');
      itext('Decimal');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('Char');
      ie_close('td');
      ie_open('td');
      itext('Character');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('String');
      ie_close('td');
      ie_open('td');
      itext('String');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('List');
      ie_close('td');
      ie_open('td');
      itext('List<Object>');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('Set');
      ie_close('td');
      ie_open('td');
      itext('Set<String>');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('Map');
      ie_close('td');
      ie_open('td');
      itext('Map<String, Object>');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('SObject');
      ie_close('td');
      ie_open('td');
      itext('SObject');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('Date');
      ie_close('td');
      ie_open('td');
      itext('Date');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('Time');
      ie_close('td');
      ie_open('td');
      itext('Time');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('Datetime');
      ie_close('td');
      ie_open('td');
      itext('Datetime');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('Syllable');
      ie_close('td');
      ie_open('td');
      itext('A syllable in the word');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('Word');
      ie_close('td');
      ie_open('td');
      itext('Word');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('Sentence');
      ie_close('td');
      ie_open('td');
      itext('Sentence');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('Paragraph');
      ie_close('td');
      ie_open('td');
      itext('Paragraph');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('Gender');
      ie_close('td');
      ie_open('td');
      itext('Gender');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('Firstname');
      ie_close('td');
      ie_open('td');
      itext('Firstname');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('Lastname');
      ie_close('td');
      ie_open('td');
      itext('Lastname');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('Prefix');
      ie_close('td');
      ie_open('td');
      itext('Prefix');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('Suffix');
      ie_close('td');
      ie_open('td');
      itext('Suffix');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('Name');
      ie_close('td');
      ie_open('td');
      itext('Person name');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('Email');
      ie_close('td');
      ie_open('td');
      itext('Email');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('Domain');
      ie_close('td');
      ie_open('td');
      itext('Domain');
      ie_close('td');
      ie_close('tr');
      ie_close('tbody');
      ie_close('table');
      ie_open('p');
      itext('For any other types, T.apex will try to find the Type and instantiate it.');
      ie_close('p');
      ie_close('article');
      ie_open('article', null, null, 'id', '4');
      ie_open('h2');
      itext('Random Boolean');
      ie_close('h2');
      ie_open('p');
      itext('We can create a random Boolean like this:');
      ie_close('p');
      $templateAlias2({ code: 'Random.anyBoolean.run(new Map<String, Object>{\n    \'likelihood\' => 60\n})', mode: 'javascript' }, null, opt_ijData);
      ie_open('p');
      itext('Here are the options:');
      ie_close('p');
      ie_open('table');
      ie_open('thead');
      ie_open('tr');
      ie_open('th');
      itext('Key');
      ie_close('th');
      ie_open('th');
      itext('Value Type');
      ie_close('th');
      ie_open('th');
      itext('Description');
      ie_close('th');
      ie_close('tr');
      ie_close('thead');
      ie_open('tbody');
      ie_open('tr');
      ie_open('td');
      itext('likelihood');
      ie_close('td');
      ie_open('td');
      itext('Integer');
      ie_close('td');
      ie_open('td');
      itext('The likelihood of being true, default to 50');
      ie_close('td');
      ie_close('tr');
      ie_close('tbody');
      ie_close('table');
      ie_close('article');
      ie_open('article', null, null, 'id', '5');
      ie_open('h2');
      itext('Random Integer');
      ie_close('h2');
      ie_open('p');
      itext('We can create a random Integer like this:');
      ie_close('p');
      $templateAlias2({ code: 'Random.anyInteger.run(new Map<String, Object>{\n    \'min\' => 5,\n    \'max\' => 20\n})', mode: 'javascript' }, null, opt_ijData);
      ie_open('p');
      itext('Here are the options:');
      ie_close('p');
      ie_open('table');
      ie_open('thead');
      ie_open('tr');
      ie_open('th');
      itext('Key');
      ie_close('th');
      ie_open('th');
      itext('Value Type');
      ie_close('th');
      ie_open('th');
      itext('Description');
      ie_close('th');
      ie_close('tr');
      ie_close('thead');
      ie_open('tbody');
      ie_open('tr');
      ie_open('td');
      itext('min');
      ie_close('td');
      ie_open('td');
      itext('Integer');
      ie_close('td');
      ie_open('td');
      itext('The min value, default to Random.MIN_INTEGER');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('max');
      ie_close('td');
      ie_open('td');
      itext('Integer');
      ie_close('td');
      ie_open('td');
      itext('The max value, default to Random.MAX_INTEGER');
      ie_close('td');
      ie_close('tr');
      ie_close('tbody');
      ie_close('table');
      ie_close('article');
      ie_open('article', null, null, 'id', '6');
      ie_open('h2');
      itext('Random Long');
      ie_close('h2');
      ie_open('p');
      itext('We can create a random Long like this:');
      ie_close('p');
      $templateAlias2({ code: 'Random.anyLong.run(new Map<String, Object>{\n    \'min\' => 5,\n    \'max\' => 20\n})', mode: 'javascript' }, null, opt_ijData);
      ie_open('p');
      itext('Here are the options:');
      ie_close('p');
      ie_open('table');
      ie_open('thead');
      ie_open('tr');
      ie_open('th');
      itext('Key');
      ie_close('th');
      ie_open('th');
      itext('Value Type');
      ie_close('th');
      ie_open('th');
      itext('Description');
      ie_close('th');
      ie_close('tr');
      ie_close('thead');
      ie_open('tbody');
      ie_open('tr');
      ie_open('td');
      itext('min');
      ie_close('td');
      ie_open('td');
      itext('Long');
      ie_close('td');
      ie_open('td');
      itext('The min value, default to Random.MIN_LONG');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('max');
      ie_close('td');
      ie_open('td');
      itext('Long');
      ie_close('td');
      ie_open('td');
      itext('The max value, default to Random.MAX_LONG');
      ie_close('td');
      ie_close('tr');
      ie_close('tbody');
      ie_close('table');
      ie_close('article');
      ie_open('article', null, null, 'id', '7');
      ie_open('h2');
      itext('Random Double');
      ie_close('h2');
      ie_open('p');
      itext('We can create a random Double like this:');
      ie_close('p');
      $templateAlias2({ code: 'Random.anyDouble.run(new Map<String, Object>{\n    \'min\' => 5,\n    \'max\' => 20\n})', mode: 'javascript' }, null, opt_ijData);
      ie_open('p');
      itext('Here are the options:');
      ie_close('p');
      ie_open('table');
      ie_open('thead');
      ie_open('tr');
      ie_open('th');
      itext('Key');
      ie_close('th');
      ie_open('th');
      itext('Value Type');
      ie_close('th');
      ie_open('th');
      itext('Description');
      ie_close('th');
      ie_close('tr');
      ie_close('thead');
      ie_open('tbody');
      ie_open('tr');
      ie_open('td');
      itext('min');
      ie_close('td');
      ie_open('td');
      itext('Double');
      ie_close('td');
      ie_open('td');
      itext('The min value, default to Random.MIN_DOUBLE');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('max');
      ie_close('td');
      ie_open('td');
      itext('Double');
      ie_close('td');
      ie_open('td');
      itext('The max value, default to Random.MAX_DOUBLE');
      ie_close('td');
      ie_close('tr');
      ie_close('tbody');
      ie_close('table');
      ie_close('article');
      ie_open('article', null, null, 'id', '8');
      ie_open('h2');
      itext('Random Decimal');
      ie_close('h2');
      ie_open('p');
      itext('We can create a random Decimal like this:');
      ie_close('p');
      $templateAlias2({ code: 'Random.anyDecimal.run(new Map<String, Object>{\n    \'min\' => 5,\n    \'max\' => 20\n})', mode: 'javascript' }, null, opt_ijData);
      ie_open('p');
      itext('Here are the options:');
      ie_close('p');
      ie_open('table');
      ie_open('thead');
      ie_open('tr');
      ie_open('th');
      itext('Key');
      ie_close('th');
      ie_open('th');
      itext('Value Type');
      ie_close('th');
      ie_open('th');
      itext('Description');
      ie_close('th');
      ie_close('tr');
      ie_close('thead');
      ie_open('tbody');
      ie_open('tr');
      ie_open('td');
      itext('min');
      ie_close('td');
      ie_open('td');
      itext('Decimal');
      ie_close('td');
      ie_open('td');
      itext('The min value, default to Random.MIN_DECIMAL');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('max');
      ie_close('td');
      ie_open('td');
      itext('Decimal');
      ie_close('td');
      ie_open('td');
      itext('The max value, default to Random.MAX_DECIMAL');
      ie_close('td');
      ie_close('tr');
      ie_close('tbody');
      ie_close('table');
      ie_close('article');
      ie_open('article', null, null, 'id', '9');
      ie_open('h2');
      itext('Random Char');
      ie_close('h2');
      ie_open('p');
      itext('We can create a random Char like this:');
      ie_close('p');
      $templateAlias2({ code: 'Random.anyChar.run(new Map<String, Object>{\n    \'alpha\' => true\n})', mode: 'javascript' }, null, opt_ijData);
      ie_open('p');
      itext('Here are the options:');
      ie_close('p');
      ie_open('table');
      ie_open('thead');
      ie_open('tr');
      ie_open('th');
      itext('Key');
      ie_close('th');
      ie_open('th');
      itext('Value Type');
      ie_close('th');
      ie_open('th');
      itext('Description');
      ie_close('th');
      ie_close('tr');
      ie_close('thead');
      ie_open('tbody');
      ie_open('tr');
      ie_open('td');
      itext('casing');
      ie_close('td');
      ie_open('td');
      itext('String');
      ie_close('td');
      ie_open('td');
      itext('upper/lower/null, default to all');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('pool');
      ie_close('td');
      ie_open('td');
      itext('String');
      ie_close('td');
      ie_open('td');
      itext('The pool to get the character from, default to null');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('alpha');
      ie_close('td');
      ie_open('td');
      itext('Boolean');
      ie_close('td');
      ie_open('td');
      itext('Whether to pick only alphabetic, default to false');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('symbols');
      ie_close('td');
      ie_open('td');
      itext('Boolean');
      ie_close('td');
      ie_open('td');
      itext('Whether to pick only symbols, default to false');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('numbers');
      ie_close('td');
      ie_open('td');
      itext('Boolean');
      ie_close('td');
      ie_open('td');
      itext('Whether to pick only numbers, default to false');
      ie_close('td');
      ie_close('tr');
      ie_close('tbody');
      ie_close('table');
      ie_close('article');
      ie_open('article', null, null, 'id', '10');
      ie_open('h2');
      itext('Random String');
      ie_close('h2');
      ie_open('p');
      itext('We can create a random String like this:');
      ie_close('p');
      $templateAlias2({ code: 'Random.anyList.run(new Map<String, Object>{\n    \'type\' => \'String\',\n    \'min\' => 5\n})', mode: 'javascript' }, null, opt_ijData);
      ie_open('p');
      itext('Here are the options:');
      ie_close('p');
      ie_open('table');
      ie_open('thead');
      ie_open('tr');
      ie_open('th');
      itext('Key');
      ie_close('th');
      ie_open('th');
      itext('Value Type');
      ie_close('th');
      ie_open('th');
      itext('Description');
      ie_close('th');
      ie_close('tr');
      ie_close('thead');
      ie_open('tbody');
      ie_open('tr');
      ie_open('td');
      itext('min');
      ie_close('td');
      ie_open('td');
      itext('Integer');
      ie_close('td');
      ie_open('td');
      itext('The min length, default to 0');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('max');
      ie_close('td');
      ie_open('td');
      itext('Integer');
      ie_close('td');
      ie_open('td');
      itext('The max length, default to 20');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('*');
      ie_close('td');
      ie_open('td');
      itext('*');
      ie_close('td');
      ie_open('td');
      itext('Passed down to Char');
      ie_close('td');
      ie_close('tr');
      ie_close('tbody');
      ie_close('table');
      ie_close('article');
      ie_open('article', null, null, 'id', '11');
      ie_open('h2');
      itext('Random List');
      ie_close('h2');
      ie_open('p');
      itext('We can create a random List<Object> like this:');
      ie_close('p');
      $templateAlias2({ code: 'Random.anyList.run(new Map<String, Object>{\n    \'type\' => \'String\',\n    \'min\' => 5\n})', mode: 'javascript' }, null, opt_ijData);
      ie_open('p');
      itext('Here are the options:');
      ie_close('p');
      ie_open('table');
      ie_open('thead');
      ie_open('tr');
      ie_open('th');
      itext('Key');
      ie_close('th');
      ie_open('th');
      itext('Value Type');
      ie_close('th');
      ie_open('th');
      itext('Description');
      ie_close('th');
      ie_close('tr');
      ie_close('thead');
      ie_open('tbody');
      ie_open('tr');
      ie_open('td');
      itext('min');
      ie_close('td');
      ie_open('td');
      itext('Integer');
      ie_close('td');
      ie_open('td');
      itext('The min length, default to 0');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('max');
      ie_close('td');
      ie_open('td');
      itext('Integer');
      ie_close('td');
      ie_open('td');
      itext('The max length, default to 20');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('pool');
      ie_close('td');
      ie_open('td');
      itext('List<Object>');
      ie_close('td');
      ie_open('td');
      itext('The pool to draw from, default to null');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('type');
      ie_close('td');
      ie_open('td');
      itext('String');
      ie_close('td');
      ie_open('td');
      itext('The type of elements in the list, default to null');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('config');
      ie_close('td');
      ie_open('td');
      itext('Map<String, Object>');
      ie_close('td');
      ie_open('td');
      itext('The config of the elements to be created, default to null');
      ie_close('td');
      ie_close('tr');
      ie_close('tbody');
      ie_close('table');
      ie_open('p');
      ie_open('code');
      itext('pool');
      ie_close('code');
      itext(' is used as a group while ');
      ie_open('code');
      itext('type');
      ie_close('code');
      itext(' and ');
      ie_open('code');
      itext('config');
      ie_close('code');
      itext(' are used as a group.');
      ie_close('p');
      ie_close('article');
      ie_open('article', null, null, 'id', '12');
      ie_open('h2');
      itext('Random Set');
      ie_close('h2');
      ie_open('p');
      itext('We can create a random Set<String> like this:');
      ie_close('p');
      $templateAlias2({ code: 'Random.anySet.run(new Map<String, Object>{\n    \'min\' => 5\n})', mode: 'javascript' }, null, opt_ijData);
      ie_open('p');
      itext('Here are the options:');
      ie_close('p');
      ie_open('table');
      ie_open('thead');
      ie_open('tr');
      ie_open('th');
      itext('Key');
      ie_close('th');
      ie_open('th');
      itext('Value Type');
      ie_close('th');
      ie_open('th');
      itext('Description');
      ie_close('th');
      ie_close('tr');
      ie_close('thead');
      ie_open('tbody');
      ie_open('tr');
      ie_open('td');
      itext('min');
      ie_close('td');
      ie_open('td');
      itext('Integer');
      ie_close('td');
      ie_open('td');
      itext('The min length, default to 0');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('max');
      ie_close('td');
      ie_open('td');
      itext('Integer');
      ie_close('td');
      ie_open('td');
      itext('The max length, default to 20');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('pool');
      ie_close('td');
      ie_open('td');
      itext('Set<String>');
      ie_close('td');
      ie_open('td');
      itext('The pool to draw from, default to null');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('type');
      ie_close('td');
      ie_open('td');
      itext('String');
      ie_close('td');
      ie_open('td');
      itext('Type is fixed to \'String\' and can be omitted, default to null');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('config');
      ie_close('td');
      ie_open('td');
      itext('Map<String, Object>');
      ie_close('td');
      ie_open('td');
      itext('The config of the elements to be created, default to null');
      ie_close('td');
      ie_close('tr');
      ie_close('tbody');
      ie_close('table');
      ie_open('p');
      ie_open('code');
      itext('pool');
      ie_close('code');
      itext(' is used as a group while ');
      ie_open('code');
      itext('type');
      ie_close('code');
      itext(' and ');
      ie_open('code');
      itext('config');
      ie_close('code');
      itext(' are used as a group.');
      ie_close('p');
      ie_close('article');
      ie_open('article', null, null, 'id', '13');
      ie_open('h2');
      itext('Random Map');
      ie_close('h2');
      ie_open('p');
      itext('We can create a random Map<String, Object> like this:');
      ie_close('p');
      $templateAlias2({ code: 'Random.anyMap.run(new Map<String, Object>{\n    \'type\' => \'String\',\n    \'min\' => 5\n})', mode: 'javascript' }, null, opt_ijData);
      ie_open('p');
      itext('Here are the options:');
      ie_close('p');
      ie_open('table');
      ie_open('thead');
      ie_open('tr');
      ie_open('th');
      itext('Key');
      ie_close('th');
      ie_open('th');
      itext('Value Type');
      ie_close('th');
      ie_open('th');
      itext('Description');
      ie_close('th');
      ie_close('tr');
      ie_close('thead');
      ie_open('tbody');
      ie_open('tr');
      ie_open('td');
      itext('min');
      ie_close('td');
      ie_open('td');
      itext('Integer');
      ie_close('td');
      ie_open('td');
      itext('The min length, default to 0');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('max');
      ie_close('td');
      ie_open('td');
      itext('Integer');
      ie_close('td');
      ie_open('td');
      itext('The max length, default to 20');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('pool');
      ie_close('td');
      ie_open('td');
      itext('Map<String, Object>');
      ie_close('td');
      ie_open('td');
      itext('The pool to draw from, default to null');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('type');
      ie_close('td');
      ie_open('td');
      itext('String');
      ie_close('td');
      ie_open('td');
      itext('Type is fixed to \'String\' and can be omitted, default to null');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('config');
      ie_close('td');
      ie_open('td');
      itext('Map<String, Object>');
      ie_close('td');
      ie_open('td');
      itext('The config of the elements to be created, default to null');
      ie_close('td');
      ie_close('tr');
      ie_close('tbody');
      ie_close('table');
      ie_open('p');
      ie_open('code');
      itext('pool');
      ie_close('code');
      itext(' is used as a group while ');
      ie_open('code');
      itext('type');
      ie_close('code');
      itext(' and ');
      ie_open('code');
      itext('config');
      ie_close('code');
      itext(' are used as a group.');
      ie_close('p');
      ie_close('article');
      ie_open('article', null, null, 'id', '14');
      ie_open('h2');
      itext('Random Date');
      ie_close('h2');
      ie_open('p');
      itext('We can create a random Date like this:');
      ie_close('p');
      $templateAlias2({ code: 'Random.anyDate.run(new Map<String, Object>{\n    \'min\' => Datetime.now().getTime(),\n    \'max\' => Datetime.now().addYears(1).getTime()\n})', mode: 'javascript' }, null, opt_ijData);
      ie_open('p');
      itext('Here are the options:');
      ie_close('p');
      ie_open('table');
      ie_open('thead');
      ie_open('tr');
      ie_open('th');
      itext('Key');
      ie_close('th');
      ie_open('th');
      itext('Value Type');
      ie_close('th');
      ie_open('th');
      itext('Description');
      ie_close('th');
      ie_close('tr');
      ie_close('thead');
      ie_open('tbody');
      ie_open('tr');
      ie_open('td');
      itext('min');
      ie_close('td');
      ie_open('td');
      itext('Long');
      ie_close('td');
      ie_open('td');
      itext('The start datetime, default to now');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('max');
      ie_close('td');
      ie_open('td');
      itext('Long');
      ie_close('td');
      ie_open('td');
      itext('The end datetime, default to 20 years later');
      ie_close('td');
      ie_close('tr');
      ie_close('tbody');
      ie_close('table');
      ie_close('article');
      ie_open('article', null, null, 'id', '15');
      ie_open('h2');
      itext('Random Time');
      ie_close('h2');
      ie_open('p');
      itext('We can create a random Time like this:');
      ie_close('p');
      $templateAlias2({ code: 'Random.anyTime.run(new Map<String, Object>{\n    \'min\' => Datetime.now().getTime(),\n    \'max\' => Datetime.now().addYears(1).getTime()\n})', mode: 'javascript' }, null, opt_ijData);
      ie_open('p');
      itext('Here are the options:');
      ie_close('p');
      ie_open('table');
      ie_open('thead');
      ie_open('tr');
      ie_open('th');
      itext('Key');
      ie_close('th');
      ie_open('th');
      itext('Value Type');
      ie_close('th');
      ie_open('th');
      itext('Description');
      ie_close('th');
      ie_close('tr');
      ie_close('thead');
      ie_open('tbody');
      ie_open('tr');
      ie_open('td');
      itext('min');
      ie_close('td');
      ie_open('td');
      itext('Long');
      ie_close('td');
      ie_open('td');
      itext('The start datetime, default to now');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('max');
      ie_close('td');
      ie_open('td');
      itext('Long');
      ie_close('td');
      ie_open('td');
      itext('The end datetime, default to 20 years later');
      ie_close('td');
      ie_close('tr');
      ie_close('tbody');
      ie_close('table');
      ie_close('article');
      ie_open('article', null, null, 'id', '16');
      ie_open('h2');
      itext('Random Datetime');
      ie_close('h2');
      ie_open('p');
      itext('We can create a random Datetime like this:');
      ie_close('p');
      $templateAlias2({ code: 'Random.anyDatetime.run(new Map<String, Object>{\n    \'min\' => Datetime.now().getTime(),\n    \'max\' => Datetime.now().addYears(1).getTime()\n})', mode: 'javascript' }, null, opt_ijData);
      ie_open('p');
      itext('Here are the options:');
      ie_close('p');
      ie_open('table');
      ie_open('thead');
      ie_open('tr');
      ie_open('th');
      itext('Key');
      ie_close('th');
      ie_open('th');
      itext('Value Type');
      ie_close('th');
      ie_open('th');
      itext('Description');
      ie_close('th');
      ie_close('tr');
      ie_close('thead');
      ie_open('tbody');
      ie_open('tr');
      ie_open('td');
      itext('min');
      ie_close('td');
      ie_open('td');
      itext('Long');
      ie_close('td');
      ie_open('td');
      itext('The start datetime, default to now');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('max');
      ie_close('td');
      ie_open('td');
      itext('Long');
      ie_close('td');
      ie_open('td');
      itext('The end datetime, default to 20 years later');
      ie_close('td');
      ie_close('tr');
      ie_close('tbody');
      ie_close('table');
      ie_close('article');
      ie_open('article', null, null, 'id', '17');
      ie_open('h2');
      itext('Random Syllable');
      ie_close('h2');
      ie_open('p');
      itext('We can create a random Syllable like this:');
      ie_close('p');
      $templateAlias2({ code: 'Random.anySyllable.run(new Map<String, Object>{\n    \'length\' => 4\n})', mode: 'javascript' }, null, opt_ijData);
      ie_open('p');
      itext('Here are the options:');
      ie_close('p');
      ie_open('table');
      ie_open('thead');
      ie_open('tr');
      ie_open('th');
      itext('Key');
      ie_close('th');
      ie_open('th');
      itext('Value Type');
      ie_close('th');
      ie_open('th');
      itext('Description');
      ie_close('th');
      ie_close('tr');
      ie_close('thead');
      ie_open('tbody');
      ie_open('tr');
      ie_open('td');
      itext('length');
      ie_close('td');
      ie_open('td');
      itext('Integer');
      ie_close('td');
      ie_open('td');
      itext('The length of the syllable, default to 2 or 3');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('capitalize');
      ie_close('td');
      ie_open('td');
      itext('Boolean');
      ie_close('td');
      ie_open('td');
      itext('Whether to capitalize the word, default to false');
      ie_close('td');
      ie_close('tr');
      ie_close('tbody');
      ie_close('table');
      ie_close('article');
      ie_open('article', null, null, 'id', '18');
      ie_open('h2');
      itext('Random Word');
      ie_close('h2');
      ie_open('p');
      itext('We can create a random Word like this:');
      ie_close('p');
      $templateAlias2({ code: 'Random.anyWord.run(new Map<String, Object>{\n    \'syllables\' => 4\n})', mode: 'javascript' }, null, opt_ijData);
      ie_open('p');
      itext('Here are the options:');
      ie_close('p');
      ie_open('table');
      ie_open('thead');
      ie_open('tr');
      ie_open('th');
      itext('Key');
      ie_close('th');
      ie_open('th');
      itext('Value Type');
      ie_close('th');
      ie_open('th');
      itext('Description');
      ie_close('th');
      ie_close('tr');
      ie_close('thead');
      ie_open('tbody');
      ie_open('tr');
      ie_open('td');
      itext('length');
      ie_close('td');
      ie_open('td');
      itext('Integer');
      ie_close('td');
      ie_open('td');
      itext('The length of the word, default to null');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('capitalize');
      ie_close('td');
      ie_open('td');
      itext('Boolean');
      ie_close('td');
      ie_open('td');
      itext('Whether to capitalize the word, default to false');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('syllables');
      ie_close('td');
      ie_open('td');
      itext('Integer');
      ie_close('td');
      ie_open('td');
      itext('The number of syllables, default to 1-3');
      ie_close('td');
      ie_close('tr');
      ie_close('tbody');
      ie_close('table');
      ie_open('p');
      ie_open('code');
      itext('length');
      ie_close('code');
      itext(' and ');
      ie_open('code');
      itext('syllables');
      ie_close('code');
      itext(' are used separately.');
      ie_close('p');
      ie_close('article');
      ie_open('article', null, null, 'id', '19');
      ie_open('h2');
      itext('Random Sentence');
      ie_close('h2');
      ie_open('p');
      itext('We can create a random Sentence like this:');
      ie_close('p');
      $templateAlias2({ code: 'Random.anySentence.run(new Map<String, Object>{\n    \'words\' => 20\n})', mode: 'javascript' }, null, opt_ijData);
      ie_open('p');
      itext('Here are the options:');
      ie_close('p');
      ie_open('table');
      ie_open('thead');
      ie_open('tr');
      ie_open('th');
      itext('Key');
      ie_close('th');
      ie_open('th');
      itext('Value Type');
      ie_close('th');
      ie_open('th');
      itext('Description');
      ie_close('th');
      ie_close('tr');
      ie_close('thead');
      ie_open('tbody');
      ie_open('tr');
      ie_open('td');
      itext('words');
      ie_close('td');
      ie_open('td');
      itext('Integer');
      ie_close('td');
      ie_open('td');
      itext('The number of words, default to 12-18');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('punctuation');
      ie_close('td');
      ie_open('td');
      itext('String');
      ie_close('td');
      ie_open('td');
      itext('The punctuation to append to the sentence, default to \'.\'');
      ie_close('td');
      ie_close('tr');
      ie_close('tbody');
      ie_close('table');
      ie_close('article');
      ie_open('article', null, null, 'id', '20');
      ie_open('h2');
      itext('Random Paragraph');
      ie_close('h2');
      ie_open('p');
      itext('We can create a random Paragraph like this:');
      ie_close('p');
      $templateAlias2({ code: 'Random.anyParagraph.run(new Map<String, Object>{\n    \'sentences\' => 5\n})', mode: 'javascript' }, null, opt_ijData);
      ie_open('p');
      itext('Here are the options:');
      ie_close('p');
      ie_open('table');
      ie_open('thead');
      ie_open('tr');
      ie_open('th');
      itext('Key');
      ie_close('th');
      ie_open('th');
      itext('Value Type');
      ie_close('th');
      ie_open('th');
      itext('Description');
      ie_close('th');
      ie_close('tr');
      ie_close('thead');
      ie_open('tbody');
      ie_open('tr');
      ie_open('td');
      itext('sentences');
      ie_close('td');
      ie_open('td');
      itext('Integer');
      ie_close('td');
      ie_open('td');
      itext('The number of sentences, default to 3-7');
      ie_close('td');
      ie_close('tr');
      ie_close('tbody');
      ie_close('table');
      ie_close('article');
      ie_open('article', null, null, 'id', '21');
      ie_open('h2');
      itext('Random Gender');
      ie_close('h2');
      ie_open('p');
      itext('We can create a random Gender like this:');
      ie_close('p');
      $templateAlias2({ code: 'Random.anyGender.run(new Map<String, Object>{\n    \'extra\' => new List<String>{ \'Unisex\' }\n})', mode: 'javascript' }, null, opt_ijData);
      ie_open('p');
      itext('Here are the options:');
      ie_close('p');
      ie_open('table');
      ie_open('thead');
      ie_open('tr');
      ie_open('th');
      itext('Key');
      ie_close('th');
      ie_open('th');
      itext('Value Type');
      ie_close('th');
      ie_open('th');
      itext('Description');
      ie_close('th');
      ie_close('tr');
      ie_close('thead');
      ie_open('tbody');
      ie_open('tr');
      ie_open('td');
      itext('extra');
      ie_close('td');
      ie_open('td');
      itext('List<String>');
      ie_close('td');
      ie_open('td');
      itext('The extra list of genders, default to empty list');
      ie_close('td');
      ie_close('tr');
      ie_close('tbody');
      ie_close('table');
      ie_close('article');
      ie_open('article', null, null, 'id', '22');
      ie_open('h2');
      itext('Random Firstname');
      ie_close('h2');
      ie_open('p');
      itext('We can create a random Firstname like this:');
      ie_close('p');
      $templateAlias2({ code: 'Random.anyFirstname.run()', mode: 'javascript' }, null, opt_ijData);
      ie_open('p');
      itext('Here are the options:');
      ie_close('p');
      ie_open('table');
      ie_open('thead');
      ie_open('tr');
      ie_open('th');
      itext('Key');
      ie_close('th');
      ie_open('th');
      itext('Value Type');
      ie_close('th');
      ie_open('th');
      itext('Description');
      ie_close('th');
      ie_close('tr');
      ie_close('thead');
      ie_open('tbody');
      ie_open('tr');
      ie_open('td');
      itext('gender');
      ie_close('td');
      ie_open('td');
      itext('String');
      ie_close('td');
      ie_open('td');
      itext('Male/Female/null, the gender according to which to pick first names, default to null, which means no specific gender');
      ie_close('td');
      ie_close('tr');
      ie_close('tbody');
      ie_close('table');
      ie_close('article');
      ie_open('article', null, null, 'id', '23');
      ie_open('h2');
      itext('Random Lastname');
      ie_close('h2');
      ie_open('p');
      itext('We can create a random Lastname like this:');
      ie_close('p');
      $templateAlias2({ code: 'Random.anyLastname.run()', mode: 'javascript' }, null, opt_ijData);
      ie_open('p');
      itext('Here are the options:');
      ie_close('p');
      ie_open('table');
      ie_open('thead');
      ie_open('tr');
      ie_open('th');
      itext('Key');
      ie_close('th');
      ie_open('th');
      itext('Value Type');
      ie_close('th');
      ie_open('th');
      itext('Description');
      ie_close('th');
      ie_close('tr');
      ie_close('thead');
      ie_void('tbody');
      ie_close('table');
      ie_close('article');
      ie_open('article', null, null, 'id', '24');
      ie_open('h2');
      itext('Random Prefix');
      ie_close('h2');
      ie_open('p');
      itext('We can create a random Prefix like this:');
      ie_close('p');
      $templateAlias2({ code: 'Random.anyPrefix.run()', mode: 'javascript' }, null, opt_ijData);
      ie_open('p');
      itext('Here are the options:');
      ie_close('p');
      ie_open('table');
      ie_open('thead');
      ie_open('tr');
      ie_open('th');
      itext('Key');
      ie_close('th');
      ie_open('th');
      itext('Value Type');
      ie_close('th');
      ie_open('th');
      itext('Description');
      ie_close('th');
      ie_close('tr');
      ie_close('thead');
      ie_open('tbody');
      ie_open('tr');
      ie_open('td');
      itext('gender');
      ie_close('td');
      ie_open('td');
      itext('String');
      ie_close('td');
      ie_open('td');
      itext('Male/Female/all/null, the gender according to which to pick prefixes, default to null, which means all prefixes');
      ie_close('td');
      ie_close('tr');
      ie_close('tbody');
      ie_close('table');
      ie_close('article');
      ie_open('article', null, null, 'id', '25');
      ie_open('h2');
      itext('Random Suffix');
      ie_close('h2');
      ie_open('p');
      itext('We can create a random Suffix like this:');
      ie_close('p');
      $templateAlias2({ code: 'Random.anySuffix.run()', mode: 'javascript' }, null, opt_ijData);
      ie_open('p');
      itext('Here are the options:');
      ie_close('p');
      ie_open('table');
      ie_open('thead');
      ie_open('tr');
      ie_open('th');
      itext('Key');
      ie_close('th');
      ie_open('th');
      itext('Value Type');
      ie_close('th');
      ie_open('th');
      itext('Description');
      ie_close('th');
      ie_close('tr');
      ie_close('thead');
      ie_void('tbody');
      ie_close('table');
      ie_close('article');
      ie_open('article', null, null, 'id', '26');
      ie_open('h2');
      itext('Random Name');
      ie_close('h2');
      ie_open('p');
      itext('We can create a random Name like this:');
      ie_close('p');
      $templateAlias2({ code: 'Random.anyName.run()', mode: 'javascript' }, null, opt_ijData);
      ie_open('p');
      itext('Here are the options:');
      ie_close('p');
      ie_open('table');
      ie_open('thead');
      ie_open('tr');
      ie_open('th');
      itext('Key');
      ie_close('th');
      ie_open('th');
      itext('Value Type');
      ie_close('th');
      ie_open('th');
      itext('Description');
      ie_close('th');
      ie_close('tr');
      ie_close('thead');
      ie_open('tbody');
      ie_open('tr');
      ie_open('td');
      itext('middle');
      ie_close('td');
      ie_open('td');
      itext('Boolean');
      ie_close('td');
      ie_open('td');
      itext('Whether to generate middle names, default to false');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('middleInitial');
      ie_close('td');
      ie_open('td');
      itext('Boolean');
      ie_close('td');
      ie_open('td');
      itext('Whether to generate middle initial names, default to false');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('prefix');
      ie_close('td');
      ie_open('td');
      itext('Boolean');
      ie_close('td');
      ie_open('td');
      itext('Whether to generate prefixes, default to false');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('suffix');
      ie_close('td');
      ie_open('td');
      itext('Boolean');
      ie_close('td');
      ie_open('td');
      itext('Whether to generate suffixes, default to false');
      ie_close('td');
      ie_close('tr');
      ie_close('tbody');
      ie_close('table');
      ie_close('article');
      ie_open('article', null, null, 'id', '27');
      ie_open('h2');
      itext('Random Email');
      ie_close('h2');
      ie_open('p');
      itext('We can create a random Email like this:');
      ie_close('p');
      $templateAlias2({ code: 'Random.anyEmail.run()', mode: 'javascript' }, null, opt_ijData);
      ie_open('p');
      itext('Here are the options:');
      ie_close('p');
      ie_open('table');
      ie_open('thead');
      ie_open('tr');
      ie_open('th');
      itext('Key');
      ie_close('th');
      ie_open('th');
      itext('Value Type');
      ie_close('th');
      ie_open('th');
      itext('Description');
      ie_close('th');
      ie_close('tr');
      ie_close('thead');
      ie_open('tbody');
      ie_open('tr');
      ie_open('td');
      itext('length');
      ie_close('td');
      ie_open('td');
      itext('Integer');
      ie_close('td');
      ie_open('td');
      itext('The length of the word before \'@\', default to null');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('domain');
      ie_close('td');
      ie_open('td');
      itext('String');
      ie_close('td');
      ie_open('td');
      itext('The domain of the email, default to be random domain');
      ie_close('td');
      ie_close('tr');
      ie_close('tbody');
      ie_close('table');
      ie_close('article');
      ie_open('article', null, null, 'id', '28');
      ie_open('h2');
      itext('Random Domain');
      ie_close('h2');
      ie_open('p');
      itext('We can create a random Domain like this:');
      ie_close('p');
      $templateAlias2({ code: 'Random.anyDomain.run()', mode: 'javascript' }, null, opt_ijData);
      ie_open('p');
      itext('Here are the options:');
      ie_close('p');
      ie_open('table');
      ie_open('thead');
      ie_open('tr');
      ie_open('th');
      itext('Key');
      ie_close('th');
      ie_open('th');
      itext('Value Type');
      ie_close('th');
      ie_open('th');
      itext('Description');
      ie_close('th');
      ie_close('tr');
      ie_close('thead');
      ie_void('tbody');
      ie_close('table');
      ie_close('article');
      ie_open('article', null, null, 'id', '29');
      ie_open('h2');
      itext('Random SObject');
      ie_close('h2');
      ie_open('p');
      itext('We can create a random SObject like this:');
      ie_close('p');
      $templateAlias2({ code: 'Random.anySObject.run(new Map<String, Object>{\n    \'type\' => \'Account\'\n})', mode: 'javascript' }, null, opt_ijData);
      ie_open('p');
      itext('Here are the options:');
      ie_close('p');
      ie_open('table');
      ie_open('thead');
      ie_open('tr');
      ie_open('th');
      itext('Key');
      ie_close('th');
      ie_open('th');
      itext('Value Type');
      ie_close('th');
      ie_open('th');
      itext('Description');
      ie_close('th');
      ie_close('tr');
      ie_close('thead');
      ie_open('tbody');
      ie_open('tr');
      ie_open('td');
      itext('type');
      ie_close('td');
      ie_open('td');
      itext('String');
      ie_close('td');
      ie_open('td');
      itext('The type of the SObject, required');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('cascade');
      ie_close('td');
      ie_open('td');
      itext('Boolean');
      ie_close('td');
      ie_open('td');
      itext('Whether to generate reference field with SObjects, default to false');
      ie_close('td');
      ie_close('tr');
      ie_open('tr');
      ie_open('td');
      itext('fields');
      ie_close('td');
      ie_open('td');
      itext('List<String> or Map<String, Object>');
      ie_close('td');
      ie_open('td');
      itext('Specify which fields to generate');
      ie_close('td');
      ie_close('tr');
      ie_close('tbody');
      ie_close('table');
      ie_open('p');
      itext('When ');
      ie_open('code');
      itext('fields');
      ie_close('code');
      itext(' is of type List, all specified fields in the list will be filled in the generated SObject.');
      ie_close('p');
      ie_open('p');
      itext('When ');
      ie_open('code');
      itext('fields');
      ie_close('code');
      itext(' is of type Map, according to the value mapped by the field keys, if it is a');
      ie_close('p');
      ie_open('ul');
      ie_open('li');
      ie_open('p');
      itext('non-Func value, filling the generated SObject field with the value');
      ie_close('p');
      ie_close('li');
      ie_open('li');
      ie_open('p');
      itext('Func value, filling the generated SObject field with the value computed using the Func');
      ie_close('p');
      ie_close('li');
      ie_close('ul');
      ie_open('p');
      itext('You can add included fields or excluded fields.');
      ie_close('p');
      $templateAlias2({ code: 'Random.addIncludedFields(\'Account\', new Set<String>{ \'Description\' });', mode: 'javascript' }, null, opt_ijData);
      ie_open('p');
      itext('This will impact all the data generation afterwards, adding the \'Description\' field when creating Account objects.');
      ie_close('p');
      ie_close('article');
      ie_open('input', null, null, 'type', 'hidden', 'value', opt_data.page.title);
      ie_close('input');
      ie_open('input', null, null, 'type', 'hidden', 'value', opt_data.site.title);
      ie_close('input');
    };
    $templateAlias1(soy.$$assignDefaults({ content: param471 }, opt_data), null, opt_ijData);
  }
  exports.render = $render;
  if (goog.DEBUG) {
    $render.soyTemplateName = 'dqcJD.render';
  }

  exports.render.params = ["page", "site"];
  exports.render.types = { "page": "?", "site": "?" };
  exports.templates = templates = exports;
  return exports;
});

var dqcJD = function (_Component) {
  _inherits(dqcJD, _Component);

  function dqcJD() {
    _classCallCheck(this, dqcJD);

    return _possibleConstructorReturn(this, (dqcJD.__proto__ || Object.getPrototypeOf(dqcJD)).apply(this, arguments));
  }

  return dqcJD;
}(_metalComponent2.default);

_metalSoy2.default.register(dqcJD, templates);
exports.dqcJD = dqcJD;
exports.templates = templates;
exports.default = templates;
/* jshint ignore:end */

/***/ })

},[280]);