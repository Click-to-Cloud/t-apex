{"title":"T.apex","githubRepo":"Click-to-Cloud/T.apex","googleAnalytics":"","index":{"title":"Home","description":"T.apex is simply the Swiss knife for unit testing in Apex.","content":" BDD Style T.apex uses 'expect xxx to xxx' style assertion to make test code more readable. Easy Mocking T.apex establishes and verifies mock objects in just few lines of code. Auto-Gen Test Data T.apex helps populate random test data to faciliate unit tests. ","srcFilePath":"src/pages/index.soy","id":"pages","location":"/./","url":"/t-apex/./","children":{"docs":{"title":"Docs","description":"Everything you need to know to get started.","content":" Docs Start learning how to leverage the power of . Choose a Guide Each one provide step by step coverage for every core feature. ","srcFilePath":"src/pages/docs/index.soy","id":"docs","location":"/docs/","url":"/t-apex/docs/","children":{"search":{"title":"Search","description":"Find what you're looking for in the documentation.","hidden":true,"content":" Electric Docs Start learning how to leverage the power of . ","srcFilePath":"src/pages/docs/search.soy","id":"search","location":"/docs/search.html","url":"/t-apex/docs/search.html"},"BDD":{"title":"BDD Style","description":"BDD Style Assertion","layout":"guide","icon":"flash","weight":1,"content":" {$page.description} Behavior Driven Development(BDD) Style Assertion T.apex favors a BDD-style assertion like this: T.expect(result).toBe(true); Matchers Here is a list of matchers used in T.apex. | Method | Description | | ------ | ----------- | | toBe(Object) | Check equality | | toEqual(Object) | Check equality | | toMatch(String) | Check string pattern matching | | toBeNull() | Check null | | toBeTrue() | Check True | | toBeFalse() | Check False | | toContain(Object) | Check containing | | toBeLessThan(Object) | Check less than | | toBeGreaterThan(Object) | Check greater than | Negate Matchers Here is how we negate the matchers. T.expect(result).never.toBe(null); Manual Failing Here is how we manually fail the test. T.fail('Should fail here'); Asymmetric Matchers Asymmetric matchers are a group of matchers that implements T.IMatcher, which usually contains asymmetric equality checking logic. Here is how we use the asymmetric matchers. T.expect(result).toEqual(T.objectOfAny(String.class)); Here is a list of the asymmetric matchers provided by T.apex. | Method | Description | | ------ | ----------- | | objectOfAny(Type) | Matches any object of given Type | | objectOfAnything() | Matches anything but null | | mapContaining(Map&lt;String, Object&gt;) | Contains all the key-value pairs | | listContaining(List&lt;Object&gt;) | Contains all elements from the list | Custom Asymmetric Matchers We can also implement our custom asymmetric matchers. public class CustomMatcher implements IMatcher { private String word; public CustomMatcher(String word) { this.word = word; } public String getMessage(Object other) { return 'Custom matcher fails'; } public Boolean matches(Object other) { return this.word == other; } } T.expect(result).toEqual(new CustomMatcher('word')); ","srcFilePath":"src/pages/docs/BDD/index.md","id":"BDD","location":"/docs/BDD/","url":"/t-apex/docs/BDD/"},"Mocking":{"children":{"behavior":{"title":"Mock Creation","description":"Mock Creation","layout":"guide","icon":"code-file","weight":1,"content":" {$page.description} How to Create Mocks We only need one line to create a mock. Func mock = (Func)T.mock(Func.class); Behind the Scenes We use Salesforce Apex Stub API to create mock objects. All limitations for Stub API also apply here. ","srcFilePath":"src/pages/docs/Mocking/behavior.md","id":"behavior","location":"/docs/Mocking/behavior.html","url":"/t-apex/docs/Mocking/behavior.html"},"creation":{"title":"Mock Behavior","description":"Mock Behavior","layout":"guide","icon":"code-file","weight":2,"content":" {$page.description} How to Establish Mock Behavior We have three ways to establish mock method behaviors. | Name | Description | Scenario | | ---- | ----------- | -------- | | Returning | Return a value | When the mocked method simply needs to return something | | Throwing | Throw an exception | When the mocked method needs to throw an exception | | Answering | Delegate the call to a Func | When the mocked method needs more than simply returning something | By Returning Here is how we establish a mock method behavior by returning. T.when(mock.run(0)).thenReturn(0); // When mock calls 'run' with 0, return 0 By Throwing Here is how we establish a mock method behavior by throwing. T.when(mock.run(0)).thenThrow(new T.TestException('test')); // When mock calls 'run' with 0, throw the exception By Answering Here is how we establish a mock method behavior by answering. T.when(mock.run(0)).thenAnswer(R.inc); // When mock calls 'run' with 0, apply the answer Func to the arguments // and return the result ","srcFilePath":"src/pages/docs/Mocking/creation.md","id":"creation","location":"/docs/Mocking/creation.html","url":"/t-apex/docs/Mocking/creation.html"},"predicates":{"title":"Argument Predicates","description":"Argument Predicates","layout":"guide","icon":"code-file","weight":3,"content":" {$page.description} What are Argument Predicates? Argument predicates are used during establishing method behavior to capture method invocations more precisely. For example, T.when(mock.run(T.anyBoolean(R.isNotNull))).thenReturn(0); // When mock calls 'run' with any Boolean that is not null, return 0 This mock method of 'run' will only get triggered when a Boolean that is not null is passed in. How to Use Argument Predicates We can choose appropriate argument predicates according to the parameter type and our needs. Let's say we want to use argument predicates in this method. mock.setItem(Integer, String) We can establish the method behavior without using argument predicates like this: T.when(mock.setItem(0, 'a')).thenReturn(null); Or we can introduce one at the first parameter. T.when(mock.setItem(T.anyInteger(0), T.anyString('a'))).thenReturn(null); Note that if we use argument predicates in any of the parameters, we need to apply them to all of the parameters. Argument Predicates Usage We can use argument predicates to represent any object of a specific type, like: T.when(mock.run(T.anyBoolean())).thenReturn(0); This gets triggered whenever a Boolean is passed in. Or we can use argument predicates to represent an object with the specific value, like: T.when(mock.run(T.anyBoolean(true))).thenReturn(0); This gets triggered only when true is passed in. Or we can use argument predicates to check according to some Funcs, like: T.when(mock.run(T.anyBoolean(R.isNotNull))).thenReturn(0); This gets triggered only when a not-null Boolean is passed in. Argument Predicate Types Here is a list of the argument predicate types that we can use in T.apex. | Method | Description | | ------ | ----------- | | any(...) | Matches any Object | | anyBoolean(...) | Matches any Boolean | | anyInteger(...) | Matches any Integer | | anyLong(...) | Matches any Long | | anyDouble(...) | Matches any Double | | anyDecimal(...) | Matches any Decimal | | anyString(...) | Matches any String | | anyList(...) | Matches any List&lt;Object&gt; | | anySet(...) | Matches any Set&lt;String&gt; | | anyMap(...) | Matches any Map&lt;String, Object&gt; | | anySObject(...) | Matches any SObject | | anyDate(...) | Matches any Date | | anyTime(...) | Matches any Time | | anyDatetime(...) | Matches any Datetime | ","srcFilePath":"src/pages/docs/Mocking/predicates.md","id":"predicates","location":"/docs/Mocking/predicates.html","url":"/t-apex/docs/Mocking/predicates.html"},"verification":{"title":"Mock Verification","description":"Mock Verification","layout":"guide","icon":"code-file","weight":4,"content":" {$page.description} How to Verify Mock Behavior After the mock has been used, we can verify mock methods have been used as we expected. T.verify(mock, 'run').toHaveBeenCalled(); We have three ways to verify mock method behaviors. | Method | Description | | ------ | ----------- | | toHaveBeenCalled() | To verify that the method has been called | | toHaveBeenCalledTimes(Integer) | To verify that the method has been called N times | | toHaveBeenCalledWith(List&lt;Object&gt;) | To verify that the method has been called with the given arguments | ","srcFilePath":"src/pages/docs/Mocking/verification.md","id":"verification","location":"/docs/Mocking/verification.html","url":"/t-apex/docs/Mocking/verification.html"}},"title":"Mocking","description":"Mocking","layout":"guide","icon":"code-file","weight":2,"content":" {$page.description} Mocking Reference Mocking is used in unit tests to provide a fake object in order to cut down unnecessary dependencies on other objects. Here is a typical example of how mock objects are used in T.apex. // Create a mock Func mock = (Func)T.mock(Func.class); // Establish mock method behavior T.when(mock.run(0)).thenReturn(0); // Run test code Object val = mock.run(0); ... // Verify mocks T.verify(mock, 'run').toHaveBeenCalled(); ","srcFilePath":"src/pages/docs/Mocking/index.md","id":"Mocking","location":"/docs/Mocking/","url":"/t-apex/docs/Mocking/","childIds":["behavior","creation","predicates","verification"]},"TestData":{"title":"Test Data","description":"Generate random test data","layout":"guide","icon":"cloud","weight":4,"content":" {$page.description} Random Data Generator A full-featured random data generator is shipped with T.apex. We can use this random data generator to generate test data. In test code, we can do this: String s = (String)T.create('String'); And this will generate a random string for us. Also we can use below, which is equivalent to the above. String s = (String)Random.anyString.run(); Random is just the random data generator in T.apex. Note that T can only be used in test codes, while Random is just a utility class and can be used anywhere outside test codes. Therefore, if we want to generate random data outside test codes, please use the latter form. Generator Options We can actually pass in options to fine tune how we would like the random data to be generated. String s = (String)T.create('String', new Map{ ... }); Or String s = (String)Random.anyString.run(new Map{ ... }); are the equivalent. The details of the options rely on the random data we want to generate. Random Object We can create a random Object like this: Random.anyObject.run(new Map{ 'type' = 'String', 'config' = new Map{ 'min' = 5 } }) Here are the options: | Key | Value Type | Description | | --- | ---------- | ----------- | | type | String | The type of data to create | | config | Map&lt;String, Object&gt; | The options to create this type of data | Available types are: | Name | Description | | ---- | ----------- | | Boolean | Boolean | | Integer | Integer | | Long | Long | | Double | Double | | Decimal | Decimal | | Char | Character | | String | String | | List | List&lt;Object&gt; | | Set | Set&lt;String&gt; | | Map | Map&lt;String, Object&gt; | | SObject | SObject | | Date | Date | | Time | Time | | Datetime | Datetime | | Syllable | A syllable in the word | | Word | Word | | Sentence | Sentence | | Paragraph | Paragraph | | Gender | Gender | | Firstname | Firstname | | Lastname | Lastname | | Prefix | Prefix | | Suffix | Suffix | | Name | Person name | | Email | Email | | Domain | Domain | For any other types, T.apex will try to find the Type and instantiate it. Random Boolean We can create a random Boolean like this: Random.anyBoolean.run(new Map{ 'likelihood' = 60 }) Here are the options: | Key | Value Type | Description | | --- | ---------- | ----------- | | likelihood | Integer | The likelihood of being true, default to 50 | Random Integer We can create a random Integer like this: Random.anyInteger.run(new Map{ 'min' = 5, 'max' = 20 }) Here are the options: | Key | Value Type | Description | | --- | ---------- | ----------- | | min | Integer | The min value, default to Random.MIN_INTEGER | | max | Integer | The max value, default to Random.MAX_INTEGER | Random Long We can create a random Long like this: Random.anyLong.run(new Map{ 'min' = 5, 'max' = 20 }) Here are the options: | Key | Value Type | Description | | --- | ---------- | ----------- | | min | Long | The min value, default to Random.MIN_LONG | | max | Long | The max value, default to Random.MAX_LONG | Random Double We can create a random Double like this: Random.anyDouble.run(new Map{ 'min' = 5, 'max' = 20 }) Here are the options: | Key | Value Type | Description | | --- | ---------- | ----------- | | min | Double | The min value, default to Random.MIN_DOUBLE | | max | Double | The max value, default to Random.MAX_DOUBLE | Random Decimal We can create a random Decimal like this: Random.anyDecimal.run(new Map{ 'min' = 5, 'max' = 20 }) Here are the options: | Key | Value Type | Description | | --- | ---------- | ----------- | | min | Decimal | The min value, default to Random.MIN_DECIMAL | | max | Decimal | The max value, default to Random.MAX_DECIMAL | Random Char We can create a random Char like this: Random.anyChar.run(new Map{ 'alpha' = true }) Here are the options: | Key | Value Type | Description | | --- | ---------- | ----------- | | casing | String | upper/lower/null, default to all | | pool | String | The pool to get the character from, default to null | | alpha | Boolean | Whether to pick only alphabetic, default to false | | symbols | Boolean | Whether to pick only symbols, default to false | | numbers | Boolean | Whether to pick only numbers, default to false | Random String We can create a random String like this: Random.anyList.run(new Map{ 'type' = 'String', 'min' = 5 }) Here are the options: | Key | Value Type | Description | | --- | ---------- | ----------- | | min | Integer | The min length, default to 0 | | max | Integer | The max length, default to 20 | | * | * | Passed down to Char | Random List We can create a random List&lt;Object&gt; like this: Random.anyList.run(new Map{ 'type' = 'String', 'min' = 5 }) Here are the options: | Key | Value Type | Description | | --- | ---------- | ----------- | | min | Integer | The min length, default to 0 | | max | Integer | The max length, default to 20 | | pool | List&lt;Object&gt; | The pool to draw from, default to null | | type | String | The type of elements in the list, default to null | | config | Map&lt;String, Object&gt; | The config of the elements to be created, default to null | pool is used as a group while type and config are used as a group. Random Set We can create a random Set&lt;String&gt; like this: Random.anySet.run(new Map{ 'min' = 5 }) Here are the options: | Key | Value Type | Description | | --- | ---------- | ----------- | | min | Integer | The min length, default to 0 | | max | Integer | The max length, default to 20 | | pool | Set&lt;String&gt; | The pool to draw from, default to null | | type | String | Type is fixed to 'String' and can be omitted, default to null | | config | Map&lt;String, Object&gt; | The config of the elements to be created, default to null | pool is used as a group while type and config are used as a group. Random Map We can create a random Map&lt;String, Object&gt; like this: Random.anyMap.run(new Map{ 'type' = 'String', 'min' = 5 }) Here are the options: | Key | Value Type | Description | | --- | ---------- | ----------- | | min | Integer | The min length, default to 0 | | max | Integer | The max length, default to 20 | | pool | Map&lt;String, Object&gt; | The pool to draw from, default to null | | type | String | Type is fixed to 'String' and can be omitted, default to null | | config | Map&lt;String, Object&gt; | The config of the elements to be created, default to null | pool is used as a group while type and config are used as a group. Random Date We can create a random Date like this: Random.anyDate.run(new Map{ 'min' = Datetime.now().getTime(), 'max' = Datetime.now().addYears(1).getTime() }) Here are the options: | Key | Value Type | Description | | --- | ---------- | ----------- | | min | Long | The start datetime, default to now | | max | Long | The end datetime, default to 20 years later | Random Time We can create a random Time like this: Random.anyTime.run(new Map{ 'min' = Datetime.now().getTime(), 'max' = Datetime.now().addYears(1).getTime() }) Here are the options: | Key | Value Type | Description | | --- | ---------- | ----------- | | min | Long | The start datetime, default to now | | max | Long | The end datetime, default to 20 years later | Random Datetime We can create a random Datetime like this: Random.anyDatetime.run(new Map{ 'min' = Datetime.now().getTime(), 'max' = Datetime.now().addYears(1).getTime() }) Here are the options: | Key | Value Type | Description | | --- | ---------- | ----------- | | min | Long | The start datetime, default to now | | max | Long | The end datetime, default to 20 years later | Random Syllable We can create a random Syllable like this: Random.anySyllable.run(new Map{ 'length' = 4 }) Here are the options: | Key | Value Type | Description | | --- | ---------- | ----------- | | length | Integer | The length of the syllable, default to 2 or 3 | | capitalize | Boolean | Whether to capitalize the word, default to false | Random Word We can create a random Word like this: Random.anyWord.run(new Map{ 'syllables' = 4 }) Here are the options: | Key | Value Type | Description | | --- | ---------- | ----------- | | length | Integer | The length of the word, default to null | | capitalize | Boolean | Whether to capitalize the word, default to false | | syllables | Integer | The number of syllables, default to 1-3 | length and syllables are used separately. Random Sentence We can create a random Sentence like this: Random.anySentence.run(new Map{ 'words' = 20 }) Here are the options: | Key | Value Type | Description | | --- | ---------- | ----------- | | words | Integer | The number of words, default to 12-18 | | punctuation | String | The punctuation to append to the sentence, default to '.' | Random Paragraph We can create a random Paragraph like this: Random.anyParagraph.run(new Map{ 'sentences' = 5 }) Here are the options: | Key | Value Type | Description | | --- | ---------- | ----------- | | sentences | Integer | The number of sentences, default to 3-7 | Random Gender We can create a random Gender like this: Random.anyGender.run(new Map{ 'extra' = new List{ 'Unisex' } }) Here are the options: | Key | Value Type | Description | | --- | ---------- | ----------- | | extra | List&lt;String&gt; | The extra list of genders, default to empty list | Random Firstname We can create a random Firstname like this: Random.anyFirstname.run() Here are the options: | Key | Value Type | Description | | --- | ---------- | ----------- | | gender | String | Male/Female/null, the gender according to which to pick first names, default to null, which means no specific gender | Random Lastname We can create a random Lastname like this: Random.anyLastname.run() Here are the options: | Key | Value Type | Description | | --- | ---------- | ----------- | Random Prefix We can create a random Prefix like this: Random.anyPrefix.run() Here are the options: | Key | Value Type | Description | | --- | ---------- | ----------- | | gender | String | Male/Female/all/null, the gender according to which to pick prefixes, default to null, which means all prefixes | Random Suffix We can create a random Suffix like this: Random.anySuffix.run() Here are the options: | Key | Value Type | Description | | --- | ---------- | ----------- | Random Name We can create a random Name like this: Random.anyName.run() Here are the options: | Key | Value Type | Description | | --- | ---------- | ----------- | | middle | Boolean | Whether to generate middle names, default to false | | middleInitial | Boolean | Whether to generate middle initial names, default to false | | prefix | Boolean | Whether to generate prefixes, default to false | | suffix | Boolean | Whether to generate suffixes, default to false | Random Email We can create a random Email like this: Random.anyEmail.run() Here are the options: | Key | Value Type | Description | | --- | ---------- | ----------- | | length | Integer | The length of the word before '@', default to null | | domain | String | The domain of the email, default to be random domain | Random Domain We can create a random Domain like this: Random.anyDomain.run() Here are the options: | Key | Value Type | Description | | --- | ---------- | ----------- | Random SObject We can create a random SObject like this: Random.anySObject.run(new Map{ 'type' = 'Account' }) Here are the options: | Key | Value Type | Description | | --- | ---------- | ----------- | | type | String | The type of the SObject, required | | cascade | Boolean | Whether to generate reference field with SObjects, default to false | | fields | List&lt;String&gt; or Map&lt;String, Object&gt; | Specify which fields to generate | When fields is of type List, all specified fields in the list will be filled in the generated SObject. When fields is of type Map, according to the value mapped by the field keys, if it is a non-Func value, filling the generated SObject field with the value Func value, filling the generated SObject field with the value computed using the Func You can add included fields or excluded fields. Random.addIncludedFields('Account', new Set{ 'Description' }); This will impact all the data generation afterwards, adding the 'Description' field when creating Account objects. ","srcFilePath":"src/pages/docs/TestData/index.md","id":"TestData","location":"/docs/TestData/","url":"/t-apex/docs/TestData/"}},"childIds":["BDD","Mocking","TestData","search"]},"tutorials":{"title":"Tutorials","description":"The tutorials","url":"/t-apex/tutorials/getting_started/step_1.html","layout":false,"content":" ","srcFilePath":"src/pages/tutorials/index.soy","id":"tutorials","location":"/tutorials/","customURL":true,"children":{"getting_started":{"title":"Getting Started","description":"The Getting Started Tutorial","tutorialTitle":"Getting started with T.apex","url":"/t-apex/tutorials/getting_started/step_1.html","layout":false,"content":" ","srcFilePath":"src/pages/tutorials/getting_started/index.soy","id":"getting_started","location":"/tutorials/getting_started/","customURL":true,"children":{"step_1":{"title":"Installation","description":"Include Apex files","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":1,"content":" {$page.title} T.apex has a dependency on R.apex. First, we will include R.apex. Include Func.cls, R.cls, and RTest.cls(optional) into your Org, and R.apex is ready. Then, we will include T.apex. Include Random.cls, T.cls, and TTest.cls(optional) into your Org, and you are ready to go. ","srcFilePath":"src/pages/tutorials/getting_started/step_1.md","id":"step_1","location":"/tutorials/getting_started/step_1.html","url":"/t-apex/tutorials/getting_started/step_1.html"},"step_2":{"title":"Preliminary Knowledge","description":"Preliminary Knowledge","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":2,"content":" {$page.title} It's recommended that you have a fair amount of knowledge on R.apex, but it's not required. T.apex uses Func objects from R.apex, and a Func is actually a custom Apex object that mimics the behavior of a function. Here is how your implement a custom Func. public class HelloWorldFunc extends Func { public HelloWorldFunc() { super(0); // specify the number of arguments the Func takes } // Provide custom implementation for a Func that takes 0 arguments. public override Object exec() { return 'Hello World'; } } And then you instantiate, and invoke it. Func helloworld = new HelloWorldFunc(); String msg = (String)helloworld.run(); To get deeper with Func objects, please check R.apex. ","srcFilePath":"src/pages/tutorials/getting_started/step_2.md","id":"step_2","location":"/tutorials/getting_started/step_2.html","url":"/t-apex/tutorials/getting_started/step_2.html"},"step_3":{"title":"Expections","description":"Expections","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":3,"content":" {$page.title} T.apex offers a lot of easy-to-use expectations for your assertions. T.expect(true).toBe(true); T.expect(5).toEqual(5); T.expect('abc').toMatch('.b.'); T.expect(null).toBeNull(); T.expect(true).toBeTrue(); T.expect(false).toBeFalse(); T.expect('abc').toContain('b'); T.expect(2).toBeLessThan(3); T.expect(3).toBeGreaterThan(2); T.fail('Should fail here'); ","srcFilePath":"src/pages/tutorials/getting_started/step_3.md","id":"step_3","location":"/tutorials/getting_started/step_3.html","url":"/t-apex/tutorials/getting_started/step_3.html"},"step_4":{"title":"Mocking","description":"Mocking","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":4,"content":" {$page.title} First, we will create a mock of Func. Func mock = (Func)T.mock(Func.class); Then we will establish the mocking method behavior. We can mock by returning a value. T.when(mock.run(0)).thenReturn(0); // When mock calls 'run' with 0, return 0 Or we can mock by throwing an exception. T.when(mock.run(0)).thenThrow(new T.TestException('test')); // When mock calls 'run' with 0, throw the exception Or we can mock by using a Func as an answer. T.when(mock.run(0)).thenAnswer(R.inc); // When mock calls 'run' with 0, apply the answer Func to the arguments // and return the result Besides, we can use argument matcher to capture method invocation more precisely. T.when(mock.run(T.anyBoolean(R.isNotNull))).thenReturn(0); // When mock calls 'run' with any Boolean that is not null, return 0 Finally, let's verify the mocks. mock.run(0); T.verify(mock, 'run').toHaveBeenCalled(); ","srcFilePath":"src/pages/tutorials/getting_started/step_4.md","id":"step_4","location":"/tutorials/getting_started/step_4.html","url":"/t-apex/tutorials/getting_started/step_4.html"},"step_5":{"title":"Generate Random Data","description":"Generate Random Data","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":5,"content":" {$page.title} We can generate all kinds of random data in T.apex. Here is how we can do this: String name = (String)T.create('Name'); // Random person names String sentence = (String)T.create('Sentence'); // Random sentences List strList = (List)T.create('List', new Map{ 'type' = 'String', 'min' = 5 }); // Create a random list that contains at least 5 strings Account acc = (Account)T.createSObject('Account', new Map{ 'fields' = new List{ 'Description' } }); // Create a random Account object that include 'Description' field ","srcFilePath":"src/pages/tutorials/getting_started/step_5.md","id":"step_5","location":"/tutorials/getting_started/step_5.html","url":"/t-apex/tutorials/getting_started/step_5.html"}},"childIds":["step_1","step_2","step_3","step_4","step_5"]}},"childIds":["getting_started"]}},"childIds":["docs","tutorials"]},"basePath":"/t-apex"}